/*
验证尼科彻斯定理，即：任何一个整数m的立方都可以写成m个连续奇数之和。

例如：

1^3=1 

2^3=3+5 

3^3=7+9+11 

4^3=13+15+17+19 

 

接口说明

原型：


 /*
 功能: 验证尼科彻斯定理，即：任何一个整数m的立方都可以写成m个连续奇数之和。
 原型：
     int GetSequeOddNum(int m,char * pcSequeOddNum);
 输入参数：
     int m：整数(取值范围：1～100)
    
 返回值：
     m个连续奇数(格式：“7+9+11”);
 */

 public String GetSequeOddNum(int m)
 {
     /*在这里实现功能*/

     return null;
 }

 

 

输入描述:
输入一个int整数

输出描述:
输出分解后的string

示例1
输入
复制
6
输出
复制
31+33+35+37+39+41
*/
import java.util.Scanner;
public class Main{
    public static String GetSequeOddNum(int m){
        int[] a=new int[10000];
        a[0]=1;

        for(int i=1;i<a.length;i++){
            a[i]=2*i+1;
        }
        int sum=0;
        for(int j=1;j<m;j++){
            sum=j+sum;
        }
        int[] sb=new int[m];
        int j=0;

        for(int i=sum;i<sum+m;i++){
            sb[j]=a[i];
            j++;
        }
        String s="";
        int i=0;
        while(i<sb.length){
            if(i!=sb.length-1){
                s+=sb[i]+"+";
            }else{
                s+=sb[i];
            }

            i++;
        }
        return s;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        while(sc.hasNext()){
            int n=sc.nextInt();
            System.out.println(GetSequeOddNum(n));
        }
        

    }
}



