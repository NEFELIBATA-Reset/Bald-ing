/*
链接：https://www.nowcoder.com/questionTerminal/e016ad9b7f0b45048c58a9f27ba618bf
来源：牛客网

有一个整数数组，请你根据快速排序的思路，找出数组中第K大的数。

给定一个整数数组a,同时给定它的大小n和要找的K(K在1到n之间)，请返回第K大的数，保证答案存在。

测试样例：
[1,3,5,2,2],5,3
返回：2
*/
import java.util.*;
public class Finder {
    public int findKth(int[] a, int n, int K) {
        // write code here
        return findKth(a,0,n-1,K);
    }
    public int findKth(int[] a, int left,int right, int K) {
        int m=quicksort(a,left,right);//调用函数，求出要求的下标
        //以下情况防止给出一个数组的一个片段，
        if(K==m-left+1){
            return a[m];
        }else if(K<(m-left+1)){
            return findKth(a,left,m-1,K);
        }else{
            return findKth(a,m+1,right,K-m+left-1);
        }
        
    }
    //快速排序：随机选取一个数，小于的放左边，大于的放右边
    //此次快排选择从大到小
    public int quicksort(int[] a,int left,int right){ 
        int mid=a[left];//以第一个数为基数
        while(left<right){//只要左下标小于右下标，就一直循环
        //只要左下标小于右下标并且右下标的值小于基数，右下标就减一
            while(left<right&&a[right]<=mid){
                right--;
            }
            a[left]=a[right];//否则就将右下标的值赋给左下标
            //只要左下标小于右下标并且左下标的值小于基数，左下标加一
            while(left<right&&a[left]>=mid){
                left++;
            }
           //否则将左下标的值赋给右下标
            a[right]=a[left];
        }
        a[left]=mid;//将基数的值赋给左下标
        return left;//返回坐下标，即就是要求的下标
    }
}
