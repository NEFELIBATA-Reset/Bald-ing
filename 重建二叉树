/*
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
*/
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.Arrays;
public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
            if(pre.length==0){
            return null;
        }
        int rootvalue=pre[0];
        int leftcount=0;
        for(leftcount=0;leftcount<in.length;leftcount++){
            if(in[leftcount]==rootvalue){
                break;
            }
        }
        TreeNode root=new TreeNode(rootvalue);
        int[] preleft= Arrays.copyOfRange(pre,1,leftcount+1);
        int[] inleft=Arrays.copyOfRange(in,0,leftcount);
       root.left=reConstructBinaryTree(preleft,inleft);
        int[] preright= Arrays.copyOfRange(pre,leftcount+1,pre.length);
        int[] inright=Arrays.copyOfRange(in,leftcount+1,in.length);
        root.right=reConstructBinaryTree(preright,inright);
        return root;
    }
}
