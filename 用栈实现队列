//栈：先进后出    队列：先进先出
//定义两个栈
import java.util.Stack;
public class Solution {
  Stack<Integer> stack1 = new Stack<Integer>();
  Stack<Integer> stack2 = new Stack<Integer>();
  //入队列入栈是一样的
  public void push(int node) {
    stack1.push(node);
  }
  //出队列
  public int pop() {
    if(stack1.empty()&&stack2.empty()){//如果栈1和栈2都为空，队列为空
    throw new RuntimeException("Queue is empty!");
  }
 
  if(stack2.empty()){ //如果栈2为空
    while(!stack1.empty()){当栈1不为空时
      stack2.push(stack1.pop());//就把栈1的栈顶元素放入栈2
    }
  }
  return stack2.pop();//栈2出栈
 }
}
